import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/* eslint-disable @typescript-eslint/no-unused-vars */
import '@testing-library/jest-dom';
import { render, screen } from '@testing-library/react';
import { useState } from 'react';
import { Button } from '../..';
import { ResponsiveProvider } from '../../providers';
import { ModalContent } from './content/modal-content';
import { ModalFooter } from './footer/modal-footer';
import { Modal } from './modal';
const ModalTemplate = () => {
    const [isVisible, setIsVisible] = useState(true);
    return (_jsxs(ResponsiveProvider, { children: [_jsx(Button, { onClick: () => setIsVisible(true), children: "Show Modal" }), _jsx(Modal, { isVisible: isVisible, onCloseModal: () => setIsVisible(false), content: _jsx("p", { children: "Modal content" }), primaryAction: _jsx(Button, { onClick: () => setIsVisible(false), children: "OK" }) })] }));
};
// describe('<Modal>', () => {
//   test('it should render properly', () => {
//     const { result } = renderHook(() => useResponsiveContext());
//     const { container } = render(<ModalTemplate />);
//     expect(result).toBeDefined();
//     expect(container).toBeDefined();
//   });
//   test('it should render properly with children', () => {
//     const { container } = render(
//       <Modal
//         isVisible
//         onCloseModal={() => ({})}
//       >
//         <ModalHeader>test</ModalHeader>
//         <ModalContent>test</ModalContent>
//         <ModalFooter>test</ModalFooter>
//       </Modal>,
//     );
//     expect(container).toBeDefined();
//   });
// });
describe('<Modal.Header>', () => {
    test.todo('it should render properly');
    // ,() => {
    //   const { container } = render(<ModalHeader>test</ModalHeader>);
    //   const t = screen.getByText(/test/i);
    //   expect(t).toHaveTextContent('test');
    //   expect(container).toBeDefined();
    // }
});
describe('<Modal.Content>', () => {
    test('it should render properly', () => {
        const { container } = render(_jsx(ModalContent, { children: "test" }));
        const t = screen.getByText(/test/i);
        expect(t).toHaveTextContent('test');
        expect(container).toBeDefined();
    });
});
describe('<Modal.Footer>', () => {
    test('it should render properly', () => {
        const { container } = render(_jsx(ModalFooter, { children: "test" }));
        const t = screen.getByText(/test/i);
        expect(t).toHaveTextContent('test');
        expect(container).toBeDefined();
    });
});

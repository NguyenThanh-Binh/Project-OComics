import { ComponentMeta, ComponentStory } from '@storybook/react';
import React from 'react';
import { Menu } from './menu';
declare const story: ComponentMeta<typeof Menu>;
export default story;
export declare const Default: ComponentStory<React.ForwardRefExoticComponent<import("./menu").MenuProps> & {
    Item: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement">>;
    ItemCheckbox: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement"> & {
        checked?: boolean | undefined;
    }>;
    Separator: () => JSX.Element;
}>;
export declare const WithMaxHeight: ComponentStory<React.ForwardRefExoticComponent<import("./menu").MenuProps> & {
    Item: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement">>;
    ItemCheckbox: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement"> & {
        checked?: boolean | undefined;
    }>;
    Separator: () => JSX.Element;
}>;
export declare const WithIcons: ComponentStory<React.ForwardRefExoticComponent<import("./menu").MenuProps> & {
    Item: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement">>;
    ItemCheckbox: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement"> & {
        checked?: boolean | undefined;
    }>;
    Separator: () => JSX.Element;
}>;
export declare const WithCheckboxes: ComponentStory<React.ForwardRefExoticComponent<import("./menu").MenuProps> & {
    Item: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement">>;
    ItemCheckbox: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement"> & {
        checked?: boolean | undefined;
    }>;
    Separator: () => JSX.Element;
}>;
export declare const AsLink: ComponentStory<React.ForwardRefExoticComponent<import("./menu").MenuProps> & {
    Item: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement">>;
    ItemCheckbox: import("../../types/polymorphic").ForwardRefComponent<"button", {
        children: React.ReactNode;
        icon?: import("packages/symbols/dist").SymbolNames | React.ReactElement<HTMLOrSVGElement, string | React.JSXElementConstructor<any>> | undefined;
        iconPosition?: "left" | "right" | undefined;
        subtext?: string | undefined;
        dimension?: "small" | "regular" | undefined;
        onClick?: ((event: Event, value: string) => void) | undefined;
        description?: React.ReactNode;
        disabled?: boolean | undefined;
        padding?: boolean | undefined;
        autoFocus?: boolean | undefined;
        decoration?: React.ReactNode;
        value: string;
    } & Pick<import("../..").TooltipProps, "placement"> & {
        checked?: boolean | undefined;
    }>;
    Separator: () => JSX.Element;
}>;
//# sourceMappingURL=menu.stories.d.ts.map